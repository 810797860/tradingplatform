##package ${package.Controller};
package com.secondhand.tradingplatformadmincontroller.controller;

import com.baomidou.mybatisplus.plugins.Page;
##import com.mpdemo.util.JsonResult;
##import com.mpdemo.util.TableJson;
import com.secondhand.tradingplatformcommon.util.JsonResult;
import com.secondhand.tradingplatformcommon.util.TableJson;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
##import ${package.Service}.${table.serviceName};
##import ${package.Entity}.${entity};
import com.secondhand.tradingplatformadminentity.entity.${entity};
import com.secondhand.tradingplatformadminservice.service.${entity}Service;

/**
 * @description : ${entity} 控制器
 * @author : ${author}
 * @since : Create in ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@Api(value="/admin#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", description="${entity} 控制器")
@RequestMapping("/admin#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    /**
     * @description : 获取分页列表
     * @author : ${author}
     * @since : Create in ${date}
     */
    @PostMapping(value = "/query", produces = {"application/json"}, consumes = {"application/json"})
    @ApiOperation(value = "/query", notes="获取分页列表")
    public TableJson<${entity}> get${entity}List(@ApiParam(name = "${entity}", value = "${entity} 实体类") @RequestBody ${entity} ${table.entityPath}) {
            TableJson<${entity}> resJson = new TableJson<>();
            Page resPage = ${table.entityPath}.getPage();
            Integer current = resPage.getCurrent();
            Integer size = resPage.getSize();
            if (current == null && size == null) {
                resJson.setSuccess(false);
                resJson.setMessage("异常信息：页数和页的大小不能为空");
                return resJson;
            }
            Page<${entity}> ${table.entityPath}Page = new Page<${entity}>(current, size);
            ${table.entityPath}Page = ${table.entityPath}Service.selectPageWithParam(${table.entityPath}Page, ${table.entityPath});
            resJson.setRecordsTotal(${table.entityPath}Page.getTotal());
            resJson.setData(${table.entityPath}Page.getRecords());
            resJson.setSuccess(true);
            return resJson;
    }

    /**
     * @description : 通过id获取${table.entityPath}
     * @author : ${author}
     * @since : Create in ${date}
     */
    @GetMapping(value = "/get_by_id/{${table.entityPath}Id}", produces = {"application/json"})
    @ApiOperation(value = "/get_by_id/{${table.entityPath}Id}", notes = "根据id获取${table.entityPath}")
    public JsonResult<${entity}> get${entity}ById( @ApiParam(name = "id",value = "${table.entityPath}Id") @PathVariable("${table.entityPath}Id") Long ${table.entityPath}Id) {
            JsonResult<${entity}> resJson = new JsonResult<>();
            ${entity} ${table.entityPath} = ${table.entityPath}Service.selectOneByObj(${table.entityPath}Id);
            resJson.setData(${table.entityPath});
            resJson.setSuccess(true);
            return resJson;
    }

    /**
     * @description : 通过id获取${table.entityPath}Map
     * @author : ${author}
     * @since : Create in ${date}
     */
    @GetMapping(value = "/get_map_by_id/{${table.entityPath}Id}", produces = {"application/json"})
    @ApiOperation(value = "/get_map_by_id/{${table.entityPath}Id}", notes = "根据id获取${table.entityPath}Map")
    public JsonResult<Map<String, Object>> get${entity}ByIdForMap( @ApiParam(name = "id", value = "${table.entityPath}Id") @PathVariable("${table.entityPath}Id") Long ${table.entityPath}Id){
            JsonResult<Map<String, Object>> resJson = new JsonResult<>();
            Map<String, Object> ${table.entityPath} = ${table.entityPath}Service.selectMapById(${table.entityPath}Id);
            resJson.setData(${table.entityPath});
            resJson.setSuccess(true);
            return resJson;
    }

    /**
     * @description : 根据id假删除${table.entityPath}
     * @author : ${author}
     * @since : Create in ${date}
     */
    @PutMapping(value = "/delete", produces = {"application/json"}, consumes = {"application/json"})
    @ApiOperation(value = "/delete", notes = "根据id假删除${table.entityPath}")
    public JsonResult<${entity}> fakeDeleteById(@ApiParam(name = "id", value = "${table.entityPath}Id") @RequestBody Long ${table.entityPath}Id){
            JsonResult<${entity}> resJson = new JsonResult<>();
            resJson.setSuccess(${table.entityPath}Service.fakeDeleteById(${table.entityPath}Id));
            return resJson;
    }

    /**
     * @description : 根据ids批量假删除${table.entityPath}
     * @author : ${author}
     * @since : Create in ${date}
     */
    @PutMapping(value = "batch_delete", produces = {"application/json"}, consumes = {"application/json"})
    @ApiOperation(value = "batch_delete", notes = "根据ids批量假删除${table.entityPath}")
    public JsonResult<${entity}> fakeBatchDelete(@ApiParam(name = "ids", value = "${table.entityPath}Ids") @RequestBody List<Long> ${table.entityPath}Ids){
            JsonResult<${entity}> resJson = new JsonResult<>();
            resJson.setSuccess(${table.entityPath}Service.fakeBatchDelete(${table.entityPath}Ids));
            return resJson;
    }

    /**
     * @description : 新增或修改${table.entityPath}
     * @author : ${author}
     * @since : Create in ${date}
     */
    @PostMapping(value = "create_update", produces = {"application/json"}, consumes = {"application/json"})
    @ApiOperation(value = "create_update", notes = "新增或修改${table.entityPath}")
    public JsonResult<${entity}> ${table.entityPath}CreateUpdate(@ApiParam(name = "${entity}", value = "${entity}实体类") @RequestBody ${entity} ${table.entityPath}){
            ${table.entityPath} = ${table.entityPath}Service.${table.entityPath}CreateUpdate(${table.entityPath});
            JsonResult<${entity}> resJson = new JsonResult<>();
            resJson.setData(${table.entityPath});
            resJson.setSuccess(true);
            return resJson;
    }
}
